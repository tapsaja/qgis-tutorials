# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Ujaval Gandhi
# This file is distributed under the same license as the QGIS Tutorials and Tips package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 신해선 <haeseonplant@gmail.com>, 2019
# rosa ahn <rosately54@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Tutorials and Tips v1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-28 07:24+0000\n"
"PO-Revision-Date: 2019-09-05 10:59+0000\n"
"Last-Translator: rosa ahn <rosately54@gmail.com>, 2019\n"
"Language-Team: Korean (https://www.transifex.com/spatialthoughts/teams/7952/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/docs/3/origin_destination_matrix.rst:2
msgid "Locating Nearest Facility with Origin-Destination Matrix (QGIS3)"
msgstr "가장 가까운 기-종점 매트릭스 위치 (QGIS3)"

#: ../../source/docs/3/origin_destination_matrix.rst:4
msgid ""
"In the previous tutorial, :doc:`basic_network_analysis`, we learnt how to "
"build a network and calculate the shortest path between 2 points. We can "
"apply that technique for many different types of network-based analysis. One"
" such application is to compute **Origin-Destination Matrix** or **OD "
"Matrix**. Given a set of origin points and another set of destination "
"points, we can calculate shortest path between each origin-destination pairs"
" and find out the travel distance/time between them. Such analysis is useful"
" to locate the closest facility to any given point. For example, a logistics"
" company may use this analysis to find the closest warehouse to their "
"customers to optimize delivery routes. Here we use Distance Matrix algorithm"
" from **QGIS Network Analysis Toolbox (QNEAT3)** plugin to find the nearest "
"health facility to each address in the city."
msgstr ""
"'basic_network_analysis`의 예제에서, 2 점사이에 가장 짧은 경로의 네트워크를 만들고 계산하는것을 알아보았습니다. "
"이에 다양한 방법의 네트워크-기반 분석을 적용할 수 있습니다. 그 중에 하나가 **기-종점 매트릭스** 또는 **OD 매트릭스**입니다."
" 기존에 주어진 점들과 다른 도착점들로, 각 기-종점 유형의 가장 짧은 노선을 찾을 수 있으며 여행 거리/시간 또한 측정할 수 있습니다."
" 이러한 분석은 어떤 점을 기점으로 근처의 시설 위치를 찾아내는 데 유용합니다. 예를 들어, 수화물 회사에서 그들의 고객에게 물품 배송시"
" 이 분석방법을 통해 최적의 경로를 찾는데 유용합니다. **QGIS 네트워크 분석 도구상자(QNEAT3)** 플러그인의 거리 매트릭스 "
"알고리즘을 이용하여 각 지점에서 가장 가까운 의료시설을 찾아보도록 하겠습니다."

#: ../../source/docs/3/origin_destination_matrix.rst:8
msgid ""
"This tutorial shows how to use your own network data to compute an origin-"
"destination matrix. If you do not have your own network data, you can use "
"**ORS Tools Plugin** and algorithm :menuselection:`ORS Tools --> Matrix -->"
"  Matrix from Layers` to do the similar analysis using OpenStreetMap data. "
"See :doc:`service_area_analysis` to learn how to use ORS Tools plugin."
msgstr ""
"이 예제에서는 어떻게 개인의 네트워크 데이터가 기-종점 매트릭스와 계산을 하는지 가르쳐 줄 것입니다. 개인 네트워크 데이터를 보유하고 "
"있지 않다면, **ORS 도구 플러그인**과 'ORS 도구 --> 매트릭스 --> 레이어의 매트릭스' 오픈 스트리트 맵을 사용하여 비슷한"
" 분석을 할 수 있습니다. :doc:`service_area_analysis` 이곳에서 ORS 도구플러그인을 어떻게 사용하는지 배우세요."

#: ../../source/docs/3/origin_destination_matrix.rst:11
msgid "Overview of the task"
msgstr "개요"

#: ../../source/docs/3/origin_destination_matrix.rst:13
msgid ""
"We will take 2 layers for Washington DC - one with points representing "
"addresses and another with points representing mental health facilities - "
"and find out the facility with the least travel distance from each address."
msgstr ""
"워싱턴 DC의 레이어 2개를 사용합니다 - 점 데이터는 주소 정보이고 다른 점 데이터는 정신의료시설을 표시하는 정보입니다 - 각 지점에서"
" 가장 짧은 노선으로 갈 수 있는 최적 경로를 찾아봅시다."

#: ../../source/docs/3/origin_destination_matrix.rst:16
msgid "Other skills you will learn"
msgstr "이 예제에서 필요한 다른 기술"

#: ../../source/docs/3/origin_destination_matrix.rst:17
msgid "Extract a stratified random sample from a point layer."
msgstr "점 레이어에서 무작위로 샘플 추출하기"

#: ../../source/docs/3/origin_destination_matrix.rst:18
msgid "Use Virtual Layers to run SQL query on a QGIS layer."
msgstr "QGIS 레이어에서 SQL 쿼리를 이용하여 가상레이어 사용하기 "

#: ../../source/docs/3/origin_destination_matrix.rst:19
msgid "Use Python Console Editor to run a pyqgis script."
msgstr "Pyqgis 스크립트를 이용하여 파이썬 콘솔 편집 사용하기"

#: ../../source/docs/3/origin_destination_matrix.rst:22
msgid "Get the data"
msgstr "데이터 획득"

#: ../../source/docs/3/origin_destination_matrix.rst:23
msgid ""
"District of Columbia government freely shares hundreds of datasets on the "
"`Open Data Catalog <https://opendata.dc.gov/>`_."
msgstr ""
"`Open Data Catalog <https://opendata.dc.gov/>`_. 이곳에서 콜롬비아 정부가 무료로 제공하는 다양한 "
"데이터를 만나보실 수 있습니다."

#: ../../source/docs/3/origin_destination_matrix.rst:25
msgid "Download the following data layers as shapefiles."
msgstr "다음의 쉐이프파일을 내려받기해주세요."

#: ../../source/docs/3/origin_destination_matrix.rst:27
msgid ""
"`Street Centerlines <https://opendata.dc.gov/datasets/street-centerlines>`_"
msgstr ""
"`Street Centerlines <https://opendata.dc.gov/datasets/street-centerlines>`_"

#: ../../source/docs/3/origin_destination_matrix.rst:28
msgid "`Address Points <https://opendata.dc.gov/datasets/address-points>`_"
msgstr "`Address Points <https://opendata.dc.gov/datasets/address-points>`_"

#: ../../source/docs/3/origin_destination_matrix.rst:29
msgid ""
"`Adult Mental Health Providers <https://opendata.dc.gov/datasets/adult-"
"mental-health-providers>`_"
msgstr ""
"`Adult Mental Health Providers <https://opendata.dc.gov/datasets/adult-"
"mental-health-providers>`_"

#: ../../source/docs/3/origin_destination_matrix.rst:32
msgid ""
"For convenience, you may directly download a copy of the datasets from the "
"links below:"
msgstr "아래 링크에서 이번예제에 사용되는 샘플파일을 쉽게 내려받을 수 있습니다:"

#: ../../source/docs/3/origin_destination_matrix.rst:35
msgid ""
"`Street_Centerlines.zip "
"<http://www.qgistutorials.com/downloads/Street_Centerlines.zip>`_"
msgstr ""
"`Street_Centerlines.zip "
"<http://www.qgistutorials.com/downloads/Street_Centerlines.zip>`_"

#: ../../source/docs/3/origin_destination_matrix.rst:37
msgid ""
"`Address_Points.zip "
"<http://www.qgistutorials.com/downloads/Address_Points.zip>`_"
msgstr ""
"`Address_Points.zip "
"<http://www.qgistutorials.com/downloads/Address_Points.zip>`_"

#: ../../source/docs/3/origin_destination_matrix.rst:39
msgid ""
"`Adult_Mental_Health_Providers.zip "
"<http://www.qgistutorials.com/downloads/Adult_Mental_Health_Providers.zip>`_"
msgstr ""
"`Adult_Mental_Health_Providers.zip "
"<http://www.qgistutorials.com/downloads/Adult_Mental_Health_Providers.zip>`_"

#: ../../source/docs/3/origin_destination_matrix.rst:41
msgid "Data Source: [DCOPENDATA]_"
msgstr "데이터 출처: [DCOPENDATA]_"

#: ../../source/docs/3/origin_destination_matrix.rst:44
msgid "Setup"
msgstr "설정"

#: ../../source/docs/3/origin_destination_matrix.rst:45
msgid ""
"Visit :menuselection:`Plugins --> Manage and Install plugins`. Search for "
"**QNEAT3** plugin and install it. Click :guilabel:`Close`."
msgstr ""
"플러그인 --> 플러르인 관리 및 설치에 들어갑니다. **QNEAT3** 플러그인을 찾아서 설치합니다.  그러고 닫기를 누릅니다."

#: ../../source/docs/3/origin_destination_matrix.rst:51
msgid "Procedure"
msgstr "과정"

#: ../../source/docs/3/origin_destination_matrix.rst:53
msgid ""
"Locate the downloaded ``Street_Centerlines.zip`` file in the "
":guilabel:`Browser` panel. Expand it and drag the ``Street_Centerlines.shp``"
" file to the canvas. Similarly, locate the "
"``Adult_Mental_Health_Providers.zip`` file, expand it and add "
"``Adult_Mental_Health_Providers.shp`` to the canvas."
msgstr ""
"내려받은 ``Street_Centerlines.zip``을 브라우즈 창에 끌어옵니다. 알집을 풀어준후  "
"``Street_Centerlines.shp``을 캔버스에 끌어주세요. 비슷하게, "
"``Adult_Mental_Health_Providers.zip``파일을 열어서, 확장한 다음, "
"``Adult_Mental_Health_Providers.shp``를 캔버스에 끌어주세요."

#: ../../source/docs/3/origin_destination_matrix.rst:58
msgid ""
"Next, locate the ``Address_Points.zip`` file, expand it and add the "
"``Address_Points.shp``. You will see a lot of points around the city. Each "
"point represents a valid address. We will not randomly select 1 point in "
"each ward to use as the origin points. This technique is called stratified "
"sampling. Go to :menuselection:`Processing --> Toolbox`."
msgstr ""
"그 다음, ``Address_Points.zip``파일을, 확장하여 ``Address_Points.shp``을 추가합니다. 도시 주변으로"
" 많은 수의 점데이터를 볼 수 있습니다. 각 개별 점은 주소정보를 담고 있습니다. 기존의 점 정보에서 무작위로 1개의 점을 추출하지 "
"않습니다. 이 기술은 층위 추출법입니다. 공간처리 --> 툴박스에 갑니다."

#: ../../source/docs/3/origin_destination_matrix.rst:63
msgid ""
"Search for and locate the :menuselection:`Vector Selection --> Random "
"extract within subsets` algorithm."
msgstr "공간 처리 툴박스에서 '벡터선택' ‣ '하위 집합 내 랜덤 추출' 알고리즘을 선택하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:68
msgid ""
"Select ``Address_Points`` as the :guilabel:`Input layer`. Each address point"
" contains an attribute called ``WARD_2012`` which has the ward number "
"associated with the address. As we want only 1 point per ward, we use that "
"attribute as the :guilabel:`ID field`. Set :guilabel:`Number/percentage of "
"selected features` as ``1``."
msgstr ""
"입력레이어에 ``Address_Points``를 선택하십시오. 각 주소 지점에는 주소와 관련된 와드 번호가있는``WARD_2012 "
"''라는 속성이 있습니다. 와드 당 1 포인트만 원하므로 ``WARD_2012 ''을 `ID 필드`로 사용합니다. '선택한 객체의 "
"개수/백분율'을 \"1\"으로 설정하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:73
msgid ""
"A new layer ``Extracted (random stratified)`` will be added to the "
":guilabel:`Layers` panel."
msgstr "`레이어` 패널에``Extracted (random stratified)``라는 새레이어가 추가됩니다."

#: ../../source/docs/3/origin_destination_matrix.rst:78
msgid ""
"Turn-off the visibility for the ``Address_Points`` layer. Right-click on the"
" ``Extracted (random stratified)`` layer and select :guilabel:`Rename "
"layer`."
msgstr ""
"``Address_Points ''레이어를 끕니다. ``Extracted (random stratified)`` 레이어를 마우스 오른쪽 "
"버튼으로 클릭하고 `레이어 이름 바꾸기 '를 선택하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:83
msgid ""
"Let's rename this layer as ``origin_points``. Similarly rename the "
"``Adult_Mental_Health_Providers`` layers representing the health facilities "
"as ``destination_points``. Naming the layers this way makes it easy to "
"identify them in subsequent processing. Go to :menuselection:`Processing -->"
" Toolbox`."
msgstr ""
"이 레이어의 이름을``origin_points ''로 바꾸겠습니다. 마찬가지로 건강 시설을 "
"나타내는``Adult_Mental_Health_Providers ''레이어의 이름을``destination_points ''로 바꿉니다."
" 이러한 방식으로 레이어의 이름을 지정하면 후속 처리에서 레이어를 쉽게 식별 할 수 있습니다. 공간처리에서 툴박스로 이동합니다."

#: ../../source/docs/3/origin_destination_matrix.rst:88
msgid ""
"Locate the :menuselection:`QNEAT3 --> Distance matrices --> OD Matrix from "
"Layers as Table (m:n)` algorithm. If you do not see this algorithm in the "
"toolbox, make sure you have installed the **QNEAT3** plugin."
msgstr ""
"도구상자 메뉴에서 `QNEAT3-> Distance matrixs-> OD Matrix from Layers from Table (m :"
" n)`알고리즘을 찾습니다. 도구 상자에 이 알고리즘이 표시되지 않으면 ** QNEAT3 ** 플러그인이 설치되어 있는지 확인하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:93
msgid ""
"This algorithm helps find the distances along the network between selected "
"origin and destination layers. Select ``Street_Centerlines`` as the "
":guilabel:`Network layer`. Select ``origin_points`` as the :guilabel:`From-"
"Points layer` and ``OBJECTID`` as the :guilabel:`Unique Point ID field`. "
"Similarly, set ``destination_points`` as the :guilabel:`To-Points Layer` and"
" ``OBJECTID`` as  the :guilabel:`Unique Point ID field`. Set the "
":guilabel:`Optimization Criterion` as ``Shortest Path``."
msgstr ""
"이 알고리즘은 선택한 원점과 대상 레이어 사이의 네트워크 거리를 찾는데 도움이됩니다. `Network layer`로 "
"``Street_Centerlines ''를 선택하십시오. `From-Points 레이어로 ``origin_points ''를, "
"`Unique Point ID 필드로``OBJECTID ''를 선택하십시오. 마찬가지로 `To-Points Layer' "
"를``destination_points ''로 선택한 후, 'Unique Point ID'를 ``OBJECTID''필드로 설정하십시오. "
"`Optimization Criterion`을 ``Shortest Path ''로 설정하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:98
msgid ""
"As many streets in the network are one-way, we need to set the "
":guilabel:`Advanced parameters` to specify the direction. See "
":doc:`basic_network_analysis` for more details on how these attributes are "
"structured. Choose ``DIRECTIONA`` as the :guilabel:`Direction field`. Enter "
"``One Way (Digitizing direction)`` as the :guilabel:`Value for forward "
"direction` and ``One way (Against digitizing direction)`` as the "
":guilabel:`Value for backward direction`. Keep other options to their "
"default values and click :guilabel:`Run`."
msgstr ""
"네트워크의 많은 거리가 일방 통행이므로 방향을 지정하려면 `고급파라미터`를 설정해야합니다. 이러한 속성의 구조에 대한 자세한 내용은 : "
"doc :`basic_network_analysis`를 ​​참조하십시오. `Direction field'로 ``DIRECTIONA ''를"
" 선택하십시오. `Value for forward direction'으로 ``One Way (Digitizing direction)``을"
" 입력하고 `Value for backward direction'으로 \"One way (Against digitizing "
"direction)\"을 입력하십시오. 다른 옵션을 기본값으로 유지하고 `Run`을 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:103
msgid ""
"A new table layer called ``Output OD Matrix`` will be added to the "
":guilabel:`Layers` panel. Right-click and select :guilabel:`Open Attributes "
"Table`. You will see that the table contains *117* rows. We had 9 origin "
"points and 13 destination points - so the output contains *9x13 = 117* pairs"
" of origins and destination. The ``total_cost`` column contains distance in "
"meters between each origin point to every destination point."
msgstr ""
"``Output OD Matrix ''라는 새 테이블 레이어가 `Layers` 패널에 추가됩니다. 마우스 오른쪽 버튼을 클릭하고 `속성 "
"테이블 열기`를 선택하십시오. 테이블에 * 117 * 행이 포함되어 있음을 알 수 있습니다. 우리는 9 개의 원점과 13 개의 목적지 "
"지점을 가졌으므로 출력은 * 9x13 = 117 * 쌍의 원점과 목적지를 포함합니다. ``total_cost ''열에는 각 원점과 모든 "
"대상 지점 사이의 거리가 미터 단위로 포함됩니다."

#: ../../source/docs/3/origin_destination_matrix.rst:108
msgid ""
"For this tutorial, we are interested in only the destination point with the "
"shortest distance. We can create a SQL query to pick the destination with "
"the least ``total_cost`` among all destinations. Go to "
":menuselection:`Database --> DB Manager..`"
msgstr ""
"이번 튜토리얼에서 우리는 거리가 가장 짧은 대상 지점에만 관심이 있습니다. 모든 대상 중에서 ``total_cost ''가 가장 적은 "
"대상을 선택하기 위해 SQL 쿼리를 만들 수 있습니다. 메뉴바에서 `데이터베이스 -> DB 관리자`로 이동하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:113
msgid ""
"In the :guilabel:`DB Manager` dialog, select the :menuselection:`Virtual "
"Layers --> Project layers --> Output OD Matrix` from the left-hand panel. "
"See `Virtual layers "
"<https://docs.qgis.org/testing/en/docs/user_manual/working_with_vector/virtual_layers.html>`_"
" documentation to learn more. Click the :guilabel:`SQL Window` button."
msgstr ""
"`DB Manager` 대화 상자의 왼쪽 패널에서 `가상레이어-> 프로젝트레이어-> Output OD Matrix '를 선택하십시오. "
"자세한 내용은 `가상 레이어 "
"<https://docs.qgis.org/testing/en/docs/user_manual/working_with_vector/virtual_layers.html>`_"
" 설명서를 참조하십시오. `SQL 창`버튼을 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:118
msgid ""
"Enter the following query and click :guilabel:`Execute`. The results will be"
" displayed in the panel below. As expected, we have 9 rows in the result - "
"the shortest path destination for each origin point. Check and select "
":guilabel:`Column with unique values` as ``origin_id``. Enter "
"``nearest_destinations`` as the :guilabel:`Layer name (prefix)`. Click "
":guilabel:`Load`."
msgstr ""
"다음 쿼리를 입력하고 `Execute`를 클릭하십시오. 아래 패널에 결과가 표시됩니다. 예상대로 결과에는 9개의 행이 있으며 각 원점에 "
"대한 최단 경로 대상입니다. `고유 한 값을 가진 열`을 ``origin_id ''로 확인하고 선택하십시오. `Layer name "
"(prefix)'에는 ``nearest_destinations ''를 입력하십시오. `Load`를 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:128
msgid ""
"A new virtual layer ``nearest_destinations`` will be added to the "
":guilabel:`Layers` panel. This table has the result of our analysis. Nearest"
" mental health center for each of the 9 origin points. Let's try a few "
"different ways to visualize and validate these results. Go to "
":menuselection:`Processing --> Toolbox`. Search for and locate the "
":menuselection:`Join attributes by field value` algorithm. Double-click to "
"launch it."
msgstr ""
"새로운 가상 레이어 ``nearest_destinations ''가 `레이어` 패널에 추가됩니다. 이 표에는 분석 결과가 있습니다. 9 "
"개의 원점 각각에 대해 가장 가까운 정신 건강 센터. 이러한 결과를 시각화하고 확인하는 몇 가지 방법을 시도해 봅시다. 메뉴바에서 "
"공간처리 -> 툴박스로 이동하십시오. 툴박스 메뉴에서 '필드 값으로 속성 결합' 알고리즘을 검색하고 찾습니다. 시작하려면 두 번 "
"클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:133
msgid ""
"Select ``origin_points`` as the :guilabel:`Input layer` and ``OBJECTID`` as "
"the :guilabel:`Table field`. Set ``nearest_destinations`` as the "
":guilabel:`Input layer 2` and ``origin_id`` as the :guilabel:`Table field "
"2`. Click the :guilabel:`...` button next to :guilabel:`Layer 2 fields to "
"copy` and select ``destination_id`` and ``shortest_distance``. Click "
":guilabel:`Run`."
msgstr ""
"`입력 레이어'로 ``origin_points' '를 선택하고 `테이블 필드로 ``OBJECTID' '를 선택하십시오. `입력 "
"레이어2`를 ``nearest_destinations ''로 입력하고, `테이블 필드2`를 ``origin_id ''로 설정하십시오. "
"`복사할 레이어 2 필드` 옆에있는 `...` 버튼을 클릭하고 ``destination_id '' 및 ``shortest_distance"
" ''를 선택하십시오.  `실행`을 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:138
msgid ""
"A new ``Joined layer`` will be added to the :guilabel:`Layers` panel. This "
"layer has the nearest destination id attribute for each origin point. We can"
" now create a hub-spoke visualization using this layer. Search for "
":menuselection:`Vector analysis --> Join by lines (hub lines)` algorithm. "
"Right-click to launch it."
msgstr ""
"`레이어` 패널에 새로운 ``Joined layer ''가 추가됩니다. 이 레이어에는 각 출발지에 가장 가까운 대상 ID 속성이 "
"있습니다. 이제 이 계층을 사용하여 허브 스포크 시각화를 만들 수 있습니다. 툴박스 메뉴바에서 벡터분석 -> '라인에 따라 결합(허브 "
"라인)' 알고리즘을 검색하십시오. 마우스 오른쪽 버튼을 클릭하여 시작합니다."

#: ../../source/docs/3/origin_destination_matrix.rst:143
msgid ""
"Select ``destination_points`` as the :guilabel:`Hub layer` and ``OBJECTID`` "
"as the :guilabel:`Hub ID field`. Select ``Joined layer` as the "
":guilabel:`Spoke layer` and ``destination_id`` as the :guilabel:`Spoke ID "
"field`. Click :guilabel:`Run`."
msgstr ""
"'허브 레이어'를 \"destination_points\"로, '허브 ID 필드'를 \"OBJECTID\"로 선택하십시오. 'Spoke "
"layer'를 \"joined layer\"로, '스포크 ID 필드'를 \"destination_id\"로 선택하십시오. `실행`을 "
"클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:148
msgid ""
"Once the processing finishes, a new layer ``Hub lines`` will be added to the"
" :guilabel:`Layers` panel. This layer shows the lines connecting each origin"
" with the nearest destination."
msgstr ""
"처리가 끝나면 새로운 레이어 ``Hub lines''이 `Layers` 패널에 추가됩니다. 이 레이어는 각 출발지를 가장 가까운 목적지와"
" 연결하는 선을 보여줍니다."

#: ../../source/docs/3/origin_destination_matrix.rst:153
msgid ""
"Note that even though the lines connecting the origin and destination is a "
"straight-line, the destination was found using the distance along the "
"network. It will be much useful visualization to show the actual shortest-"
"path between each origin-destination. As of now, there is no easy way to "
"generate the shortest-path between multiple origin-destination pairs the way"
" we generated the distance matrix. But I will demonstrate a way to use some "
"python scripting to generate this visualization. Firs, let's run the "
"shortest path algorithm on 1 pair. Locate the :menuselection:`QNEAT3 --> "
"Routing --> Shortest path (point to point)` algorithm and launch it."
msgstr ""
"출발지와 목적지를 연결하는 선이 직선이더라도 네트워크를 따라 거리를 사용하여 목적지를 찾았습니다. 각 출발지-목적지 간의 실제 최단 "
"경로를 표시하는 것이 훨씬 유용한 시각화입니다. 현재로서는 거리 행렬을 생성하는 방식으로 여러 출발지-목적지 쌍 사이에서 최단 경로를 "
"생성하는 쉬운 방법이 없습니다. 그러나 파이썬 시각화를 사용 하여이 시각화를 생성하는 방법을 보여 드리겠습니다. 먼저, 최단 경로 "
"알고리즘을 1 쌍으로 실행합시다. 툴박스메뉴에서 `QNEAT3-> Routing-> Shortest path (point to "
"point) 알고리즘을 찾아서 실행하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:158
msgid ""
"In the :guilabel:`Shortest Path (Point to Point)` dialog, select "
"``Street_Centerlines`` as the :guilabel:`Vector layer representing network`."
"  Keep the :guilabel:`Path type to calculate` as ``Shortest``. Next we need "
"to pick a start and end point. You can click the :guilabel:`...` button next"
" to :guilabel:`Start point` and click on the origin point in the canvas. "
"Similarly select the destination point as the :guilabel:`End point`. Expand "
"the :guilabel:`Advanced parameter` section. Choose ``DIRECTIONA`` as the "
":guilabel:`Direction field`. Enter ``One Way (Digitizing direction)`` as the"
" :guilabel:`Value for forward direction` and ``One way (Against digitizing "
"direction)`` as the :guilabel:`Value for backward direction`. Keep other "
"options to their default values and click :guilabel:`Run`."
msgstr ""
"`Shortest Path (Point to Point)`대화 상자에서 `Network layer`로 "
"``Street_Centerlines ''를 선택하십시오. `Path type to calculate`을 ``Shortest ''로 "
"유지하십시오. 다음으로 시작점과 끝점을 선택해야합니다. `Start point'옆에있는 `...` 버튼을 클릭하고 캔버스에서 원점을 "
"클릭하십시오. 마찬가지로 `End point`와 같이 대상 지점을 선택하십시오. `고급 파라미터` 섹션을 여십시오. `Direction "
"field` 로 ``DIRECTIONA ''를 선택하십시오. `Value for forward direction'으로 ``One Way "
"(Digitizing direction)``을 입력하고 `Value for backward direction'으로 One way "
"(Against digitizing direction)``을 입력하십시오. 다른 옵션을 기본값으로 유지하고 `실행`을 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:163
msgid ""
"A new layer ``Shortest Path Layer`` wll be added to the :guilabel:`Layers` "
"panel. You will see that this path follows the network rather than "
"connecting the origin and destination with a straight line. The reason we "
"ran the algorithm on 1 pair is to easily identify the parameter values that "
"we can use in our script. Select both ``Hub lines`` and ``Shortest Path "
"layer``, right-click and select :guilabel:`Remove Layer`. Click the "
":guilabel:`History` button in the :guilabel:`Processing Toolbox`."
msgstr ""
"새로운 레이어 ``Shortest Path Layer''가 `레이어` 패널에 추가됩니다. 이 경로는 출발지와 목적지를 직선으로 연결하지 "
"않고 네트워크를 따릅니다. 알고리즘을 1 쌍으로 실행 한 이유는 스크립트에서 사용할 수있는 매개 변수 값을 쉽게 식별하기 위해서입니다. "
"``Hub lines''과``Shortest Path layer''를 모두 선택하고 마우스 오른쪽 버튼을 클릭 한 후 `레이어 제거 '를"
" 선택하십시오. `공간처리 툴박스`에서 `History` 단추를 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:168
msgid ""
"Pick the top-most algorithm and you will see the full command displayed in "
"the panel below. Copy the command and click :guilabel:`Close`."
msgstr "최상위 알고리즘을 선택하면 아래 패널에 전체 명령이 표시됩니다. 명령을 복사하고 `Close`를 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:173
msgid "Go to :menuselection:`Plugins --> Python Console`."
msgstr "메뉴 플러그인 --> 파이썬 콘솔로 가십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:178
msgid ""
"Click the :guilabel:`Show Editor` button in the :guilabel:`Python Console`."
msgstr "`파이썬콘쏠`에서 `Show Editor` 버튼을 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:183
msgid ""
"In the editor window, copy/paste the following script. This script uses the "
"parameter values from the processing history that we saw earlier. Click "
":guilabel:`Run Script` button to start execution."
msgstr ""
"편집기 창에서 다음 스크립트를 복사 / 붙여 넣기하십시오. 이 스크립트는 앞에서 본 처리 기록의 매개 변수 값을 사용합니다. `스크립트 "
"실행` 버튼을 클릭하여 실행을 시작하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:190
msgid ""
"The script will take a few minutes to run. Once finished, you will see 9 new"
" layers named ``Shortest Path layer``. Let's merge these paths to a single "
"layer. Find the :menuselection:`Vector general --> Merge vector layers` "
"algorithm and launch it."
msgstr ""
"스크립트를 실행하는 데 몇 분이 걸립니다. 완료되면 ``가장 짧은 경로 레이어 ''라는 9개의 새로운 레이어가 표시됩니다. 이 경로를 "
"단일 레이어로 병합합시다. 툴박스 메뉴바에서 `벡터 일반-> 벡터 레이어 병합' 알고리즘을 찾아서 실행합니다."

#: ../../source/docs/3/origin_destination_matrix.rst:195
msgid ""
"Select all 9 ``Shortest Path layer`` as the :guilabel:`Input layers`. Click "
":guilabel:`Run`."
msgstr "`입력 레이어`로 9개의 ``Shortest Path layer''를 모두 선택하십시오. `실행`을 클릭하십시오."

#: ../../source/docs/3/origin_destination_matrix.rst:200
msgid ""
"A new ``Merged`` layer will be created which will contain shortest path "
"between our origins and destinations."
msgstr "출발지와 목적지 사이의 최단 경로를 포함하는 새로운 \"병합\" 레이어가 생성됩니다."
