# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Ujaval Gandhi
# This file is distributed under the same license as the QGIS Tutorials and Tips package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Tutorials and Tips v1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-28 07:24+0000\n"
"PO-Revision-Date: 2019-09-05 10:59+0000\n"
"Language-Team: Russian (https://www.transifex.com/spatialthoughts/teams/7952/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../source/docs/3/origin_destination_matrix.rst:2
msgid "Locating Nearest Facility with Origin-Destination Matrix (QGIS3)"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:4
msgid ""
"In the previous tutorial, :doc:`basic_network_analysis`, we learnt how to "
"build a network and calculate the shortest path between 2 points. We can "
"apply that technique for many different types of network-based analysis. One"
" such application is to compute **Origin-Destination Matrix** or **OD "
"Matrix**. Given a set of origin points and another set of destination "
"points, we can calculate shortest path between each origin-destination pairs"
" and find out the travel distance/time between them. Such analysis is useful"
" to locate the closest facility to any given point. For example, a logistics"
" company may use this analysis to find the closest warehouse to their "
"customers to optimize delivery routes. Here we use Distance Matrix algorithm"
" from **QGIS Network Analysis Toolbox (QNEAT3)** plugin to find the nearest "
"health facility to each address in the city."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:8
msgid ""
"This tutorial shows how to use your own network data to compute an origin-"
"destination matrix. If you do not have your own network data, you can use "
"**ORS Tools Plugin** and algorithm :menuselection:`ORS Tools --> Matrix -->"
"  Matrix from Layers` to do the similar analysis using OpenStreetMap data. "
"See :doc:`service_area_analysis` to learn how to use ORS Tools plugin."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:11
msgid "Overview of the task"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:13
msgid ""
"We will take 2 layers for Washington DC - one with points representing "
"addresses and another with points representing mental health facilities - "
"and find out the facility with the least travel distance from each address."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:16
msgid "Other skills you will learn"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:17
msgid "Extract a stratified random sample from a point layer."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:18
msgid "Use Virtual Layers to run SQL query on a QGIS layer."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:19
msgid "Use Python Console Editor to run a pyqgis script."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:22
msgid "Get the data"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:23
msgid ""
"District of Columbia government freely shares hundreds of datasets on the "
"`Open Data Catalog <https://opendata.dc.gov/>`_."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:25
msgid "Download the following data layers as shapefiles."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:27
msgid ""
"`Street Centerlines <https://opendata.dc.gov/datasets/street-centerlines>`_"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:28
msgid "`Address Points <https://opendata.dc.gov/datasets/address-points>`_"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:29
msgid ""
"`Adult Mental Health Providers <https://opendata.dc.gov/datasets/adult-"
"mental-health-providers>`_"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:32
msgid ""
"For convenience, you may directly download a copy of the datasets from the "
"links below:"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:35
msgid ""
"`Street_Centerlines.zip "
"<http://www.qgistutorials.com/downloads/Street_Centerlines.zip>`_"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:37
msgid ""
"`Address_Points.zip "
"<http://www.qgistutorials.com/downloads/Address_Points.zip>`_"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:39
msgid ""
"`Adult_Mental_Health_Providers.zip "
"<http://www.qgistutorials.com/downloads/Adult_Mental_Health_Providers.zip>`_"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:41
msgid "Data Source: [DCOPENDATA]_"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:44
msgid "Setup"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:45
msgid ""
"Visit :menuselection:`Plugins --> Manage and Install plugins`. Search for "
"**QNEAT3** plugin and install it. Click :guilabel:`Close`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:51
msgid "Procedure"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:53
msgid ""
"Locate the downloaded ``Street_Centerlines.zip`` file in the "
":guilabel:`Browser` panel. Expand it and drag the ``Street_Centerlines.shp``"
" file to the canvas. Similarly, locate the "
"``Adult_Mental_Health_Providers.zip`` file, expand it and add "
"``Adult_Mental_Health_Providers.shp`` to the canvas."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:58
msgid ""
"Next, locate the ``Address_Points.zip`` file, expand it and add the "
"``Address_Points.shp``. You will see a lot of points around the city. Each "
"point represents a valid address. We will not randomly select 1 point in "
"each ward to use as the origin points. This technique is called stratified "
"sampling. Go to :menuselection:`Processing --> Toolbox`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:63
msgid ""
"Search for and locate the :menuselection:`Vector Selection --> Random "
"extract within subsets` algorithm."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:68
msgid ""
"Select ``Address_Points`` as the :guilabel:`Input layer`. Each address point"
" contains an attribute called ``WARD_2012`` which has the ward number "
"associated with the address. As we want only 1 point per ward, we use that "
"attribute as the :guilabel:`ID field`. Set :guilabel:`Number/percentage of "
"selected features` as ``1``."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:73
msgid ""
"A new layer ``Extracted (random stratified)`` will be added to the "
":guilabel:`Layers` panel."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:78
msgid ""
"Turn-off the visibility for the ``Address_Points`` layer. Right-click on the"
" ``Extracted (random stratified)`` layer and select :guilabel:`Rename "
"layer`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:83
msgid ""
"Let's rename this layer as ``origin_points``. Similarly rename the "
"``Adult_Mental_Health_Providers`` layers representing the health facilities "
"as ``destination_points``. Naming the layers this way makes it easy to "
"identify them in subsequent processing. Go to :menuselection:`Processing -->"
" Toolbox`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:88
msgid ""
"Locate the :menuselection:`QNEAT3 --> Distance matrices --> OD Matrix from "
"Layers as Table (m:n)` algorithm. If you do not see this algorithm in the "
"toolbox, make sure you have installed the **QNEAT3** plugin."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:93
msgid ""
"This algorithm helps find the distances along the network between selected "
"origin and destination layers. Select ``Street_Centerlines`` as the "
":guilabel:`Network layer`. Select ``origin_points`` as the :guilabel:`From-"
"Points layer` and ``OBJECTID`` as the :guilabel:`Unique Point ID field`. "
"Similarly, set ``destination_points`` as the :guilabel:`To-Points Layer` and"
" ``OBJECTID`` as  the :guilabel:`Unique Point ID field`. Set the "
":guilabel:`Optimization Criterion` as ``Shortest Path``."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:98
msgid ""
"As many streets in the network are one-way, we need to set the "
":guilabel:`Advanced parameters` to specify the direction. See "
":doc:`basic_network_analysis` for more details on how these attributes are "
"structured. Choose ``DIRECTIONA`` as the :guilabel:`Direction field`. Enter "
"``One Way (Digitizing direction)`` as the :guilabel:`Value for forward "
"direction` and ``One way (Against digitizing direction)`` as the "
":guilabel:`Value for backward direction`. Keep other options to their "
"default values and click :guilabel:`Run`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:103
msgid ""
"A new table layer called ``Output OD Matrix`` will be added to the "
":guilabel:`Layers` panel. Right-click and select :guilabel:`Open Attributes "
"Table`. You will see that the table contains *117* rows. We had 9 origin "
"points and 13 destination points - so the output contains *9x13 = 117* pairs"
" of origins and destination. The ``total_cost`` column contains distance in "
"meters between each origin point to every destination point."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:108
msgid ""
"For this tutorial, we are interested in only the destination point with the "
"shortest distance. We can create a SQL query to pick the destination with "
"the least ``total_cost`` among all destinations. Go to "
":menuselection:`Database --> DB Manager..`"
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:113
msgid ""
"In the :guilabel:`DB Manager` dialog, select the :menuselection:`Virtual "
"Layers --> Project layers --> Output OD Matrix` from the left-hand panel. "
"See `Virtual layers "
"<https://docs.qgis.org/testing/en/docs/user_manual/working_with_vector/virtual_layers.html>`_"
" documentation to learn more. Click the :guilabel:`SQL Window` button."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:118
msgid ""
"Enter the following query and click :guilabel:`Execute`. The results will be"
" displayed in the panel below. As expected, we have 9 rows in the result - "
"the shortest path destination for each origin point. Check and select "
":guilabel:`Column with unique values` as ``origin_id``. Enter "
"``nearest_destinations`` as the :guilabel:`Layer name (prefix)`. Click "
":guilabel:`Load`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:128
msgid ""
"A new virtual layer ``nearest_destinations`` will be added to the "
":guilabel:`Layers` panel. This table has the result of our analysis. Nearest"
" mental health center for each of the 9 origin points. Let's try a few "
"different ways to visualize and validate these results. Go to "
":menuselection:`Processing --> Toolbox`. Search for and locate the "
":menuselection:`Join attributes by field value` algorithm. Double-click to "
"launch it."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:133
msgid ""
"Select ``origin_points`` as the :guilabel:`Input layer` and ``OBJECTID`` as "
"the :guilabel:`Table field`. Set ``nearest_destinations`` as the "
":guilabel:`Input layer 2` and ``origin_id`` as the :guilabel:`Table field "
"2`. Click the :guilabel:`...` button next to :guilabel:`Layer 2 fields to "
"copy` and select ``destination_id`` and ``shortest_distance``. Click "
":guilabel:`Run`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:138
msgid ""
"A new ``Joined layer`` will be added to the :guilabel:`Layers` panel. This "
"layer has the nearest destination id attribute for each origin point. We can"
" now create a hub-spoke visualization using this layer. Search for "
":menuselection:`Vector analysis --> Join by lines (hub lines)` algorithm. "
"Right-click to launch it."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:143
msgid ""
"Select ``destination_points`` as the :guilabel:`Hub layer` and ``OBJECTID`` "
"as the :guilabel:`Hub ID field`. Select ``Joined layer` as the "
":guilabel:`Spoke layer` and ``destination_id`` as the :guilabel:`Spoke ID "
"field`. Click :guilabel:`Run`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:148
msgid ""
"Once the processing finishes, a new layer ``Hub lines`` will be added to the"
" :guilabel:`Layers` panel. This layer shows the lines connecting each origin"
" with the nearest destination."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:153
msgid ""
"Note that even though the lines connecting the origin and destination is a "
"straight-line, the destination was found using the distance along the "
"network. It will be much useful visualization to show the actual shortest-"
"path between each origin-destination. As of now, there is no easy way to "
"generate the shortest-path between multiple origin-destination pairs the way"
" we generated the distance matrix. But I will demonstrate a way to use some "
"python scripting to generate this visualization. Firs, let's run the "
"shortest path algorithm on 1 pair. Locate the :menuselection:`QNEAT3 --> "
"Routing --> Shortest path (point to point)` algorithm and launch it."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:158
msgid ""
"In the :guilabel:`Shortest Path (Point to Point)` dialog, select "
"``Street_Centerlines`` as the :guilabel:`Vector layer representing network`."
"  Keep the :guilabel:`Path type to calculate` as ``Shortest``. Next we need "
"to pick a start and end point. You can click the :guilabel:`...` button next"
" to :guilabel:`Start point` and click on the origin point in the canvas. "
"Similarly select the destination point as the :guilabel:`End point`. Expand "
"the :guilabel:`Advanced parameter` section. Choose ``DIRECTIONA`` as the "
":guilabel:`Direction field`. Enter ``One Way (Digitizing direction)`` as the"
" :guilabel:`Value for forward direction` and ``One way (Against digitizing "
"direction)`` as the :guilabel:`Value for backward direction`. Keep other "
"options to their default values and click :guilabel:`Run`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:163
msgid ""
"A new layer ``Shortest Path Layer`` wll be added to the :guilabel:`Layers` "
"panel. You will see that this path follows the network rather than "
"connecting the origin and destination with a straight line. The reason we "
"ran the algorithm on 1 pair is to easily identify the parameter values that "
"we can use in our script. Select both ``Hub lines`` and ``Shortest Path "
"layer``, right-click and select :guilabel:`Remove Layer`. Click the "
":guilabel:`History` button in the :guilabel:`Processing Toolbox`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:168
msgid ""
"Pick the top-most algorithm and you will see the full command displayed in "
"the panel below. Copy the command and click :guilabel:`Close`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:173
msgid "Go to :menuselection:`Plugins --> Python Console`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:178
msgid ""
"Click the :guilabel:`Show Editor` button in the :guilabel:`Python Console`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:183
msgid ""
"In the editor window, copy/paste the following script. This script uses the "
"parameter values from the processing history that we saw earlier. Click "
":guilabel:`Run Script` button to start execution."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:190
msgid ""
"The script will take a few minutes to run. Once finished, you will see 9 new"
" layers named ``Shortest Path layer``. Let's merge these paths to a single "
"layer. Find the :menuselection:`Vector general --> Merge vector layers` "
"algorithm and launch it."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:195
msgid ""
"Select all 9 ``Shortest Path layer`` as the :guilabel:`Input layers`. Click "
":guilabel:`Run`."
msgstr ""

#: ../../source/docs/3/origin_destination_matrix.rst:200
msgid ""
"A new ``Merged`` layer will be created which will contain shortest path "
"between our origins and destinations."
msgstr ""
